[1mdiff --git a/webapp/cube/views.py b/webapp/cube/views.py[m
[1mindex c845e56fa..5e1b74a76 100644[m
[1m--- a/webapp/cube/views.py[m
[1m+++ b/webapp/cube/views.py[m
[36m@@ -44,6 +44,24 @@[m [medx_api = EdxAPI([m
     edx_session,[m
 )[m
 [m
[32m+[m[32mMODULES_ORDER = [[m
[32m+[m[32m    "course-v1:CUBE+sysarch+2020",[m
[32m+[m[32m    "course-v1:CUBE+package+2020",[m
[32m+[m[32m    "course-v1:CUBE+commands+2020",[m
[32m+[m[32m    "course-v1:CUBE+devices+2020",[m
[32m+[m[32m    "course-v1:CUBE+shellscript+2020",[m
[32m+[m[32m    "course-v1:CUBE+admintasks+2020",[m
[32m+[m[32m    "course-v1:CUBE+systemd+2020",[m
[32m+[m[32m    "course-v1:CUBE+networking+2020",[m
[32m+[m[32m    "course-v1:CUBE+security+2020",[m
[32m+[m[32m    "course-v1:CUBE+kernel+2020",[m
[32m+[m[32m    "course-v1:CUBE+storage+2020",[m
[32m+[m[32m    "course-v1:CUBE+virtualisation+2020",[m
[32m+[m[32m    "course-v1:CUBE+microk8s+2020",[m
[32m+[m[32m    "course-v1:CUBE+maas+2020",[m
[32m+[m[32m    "course-v1:CUBE+juju+2020",[m
[32m+[m[32m][m
[32m+[m
 [m
 @cube_decorator(response="html")[m
 def cube_microcerts():[m
[36m@@ -75,6 +93,7 @@[m [mdef cube_microcerts():[m
     assertions = {}[m
     enrollments = [][m
     passed_courses = 0[m
[32m+[m[32m    study_labs_listing = None[m
 [m
     if edx_user:[m
         assertions = {[m
[36m@@ -117,6 +136,12 @@[m [mdef cube_microcerts():[m
             "id": course_id,[m
             "product_listing_id": product_list["id"],[m
             "value": product_list["price"]["value"],[m
[32m+[m[32m            "take_url": ([m
[32m+[m[32m                edx_url[m
[32m+[m[32m                + quote_plus([m
[32m+[m[32m                    f"/courses/{course_id}/courseware/2020/start/?child=first"[m
[32m+[m[32m                )[m
[32m+[m[32m            ),[m
         }[m
 [m
         # Get UA Contracts content[m
[36m@@ -134,28 +159,15 @@[m [mdef cube_microcerts():[m
                 )["proctored_exam_attempts"][m
 [m
         if product_list["productID"] == "cube-study-labs":[m
[31m-            course_id = product_list["externalIDs"][0]["IDs"][0][m
[31m-            study_labs_listing = {[m
[31m-                "product_listing_id": product_list["id"],[m
[31m-                "price": product_list["price"]["value"],[m
[31m-                "currency": product_list["price"]["currency"],[m
[31m-                "product_id": product_list["productID"],[m
[31m-                "status": product_list["status"],[m
[31m-                "created_at": product_list["createdAt"],[m
[31m-                "last_modified_at": product_list["lastModifiedAt"],[m
[31m-                "effective_days": product_list["effectiveDays"],[m
[31m-                "course_id": course_id,[m
[31m-                "study_labs_url": edx_url[m
[31m-                + quote_plus(f"courses/{course_id}/course/"),[m
[31m-                "name": product_list["name"],[m
[31m-                "has_study_labs": course_id in enrollments,[m
[31m-            }[m
[31m-            study_labs = ([m
[31m-                edx_url + quote_plus(f"courses/{course_id}/course/"),[m
[32m+[m[32m            study_labs_listing = course[m
[32m+[m[32m            study_labs_listing["name"] = "Study Labs"[m
[32m+[m[32m            study_labs_listing["take_url"] = str([m
[32m+[m[32m                edx_url + quote_plus(f"/courses/{course_id}/course"),[m
[32m+[m[32m            )[m
[32m+[m[32m            study_labs_listing["status"] = str([m
[32m+[m[32m                "enrolled" if course_id in enrollments else "not-enrolled",[m
             )[m
 [m
[31m-        # This codition skips study labs[m
[31m-        # Which don't have badgr data[m
         if "badge-class" in course:[m
             assertion = assertions.get(course["badge-class"])[m
             course["status"] = "not-enrolled"[m
[36m@@ -172,13 +184,11 @@[m [mdef cube_microcerts():[m
             elif course["id"] in enrollments:[m
                 course["status"] = "enrolled"[m
 [m
[31m-            course_id = course["id"][m
[31m-            course["take_url"] = edx_url + quote_plus([m
[31m-                f"/courses/{course_id}/courseware/2020/start/?child=first"[m
[31m-            )[m
[31m-            course["study_labs_url"] = edx_url + quote_plus([m
[31m-                f"courses/{study_labs}/course/"[m
[32m+[m[32m            slug = course_id.split("+")[1][m
[32m+[m[32m            course["study_lab_url"] = edx_url + quote_plus([m
[32m+[m[32m                f"/courses/{study_labs}/courseware/{slug}/"[m
             )[m
[32m+[m
             courses.append(course)[m
 [m
     return flask.render_template([m
[36m@@ -193,8 +203,6 @@[m [mdef cube_microcerts():[m
             "passed_courses": passed_courses,[m
             "has_enrollments": len(enrollments) > 0,[m
             "has_study_labs": study_labs in enrollments,[m
[31m-            "study_labs_url": edx_url[m
[31m-            + quote_plus(f"courses/{study_labs}/course/"),[m
             "study_labs_listing": study_labs_listing,[m
         },[m
     )[m
[36m@@ -208,6 +216,7 @@[m [mdef get_microcerts():[m
     returns: json[m
     """[m
     sso_user = user_info(flask.session)[m
[32m+[m[32m    study_labs = "course-v1:CUBE+study_labs+2020"[m
     account = None[m
 [m
     if sso_user:[m
[36m@@ -222,9 +231,6 @@[m [mdef get_microcerts():[m
         f"{edx_api.base_url}/auth/login/tpa-saml/"[m
         "?auth_entry=login&idp=ubuntuone&next="[m
     )[m
[31m-    study_labs_url = edx_url + quote_plus([m
[31m-        f"courses/course-v1:CUBE+study_labs+2020/course/"[m
[31m-    )[m
 [m
     edx_user = edx_api.get_user(sso_user["email"]) if sso_user else None[m
     product_listings = g.api.get_product_listings("canonical-cube")[[m
[36m@@ -277,6 +283,12 @@[m [mdef get_microcerts():[m
             "id": course_id,[m
             "product_listing_id": product_list["id"],[m
             "value": product_list["price"]["value"],[m
[32m+[m[32m            "take_url": ([m
[32m+[m[32m                edx_url[m
[32m+[m[32m                + quote_plus([m
[32m+[m[32m                    f"/courses/{course_id}/courseware/2020/start/?child=first"[m
[32m+[m[32m                )[m
[32m+[m[32m            ),[m
         }[m
 [m
         # Get UA Contracts content[m
[36m@@ -294,19 +306,14 @@[m [mdef get_microcerts():[m
                 )["proctored_exam_attempts"][m
 [m
         if product_list["productID"] == "cube-study-labs":[m
[31m-            course_id = product_list["externalIDs"][0]["IDs"][0][m
[31m-            study_labs_url = ([m
[31m-                edx_url + quote_plus(f"courses/{course_id}/course/"),[m
[32m+[m[32m            study_labs_listing = course[m
[32m+[m[32m            study_labs_listing["name"] = "Study Labs"[m
[32m+[m[32m            study_labs_listing["take_url"] = str([m
[32m+[m[32m                edx_url + quote_plus(f"/courses/{course_id}/course"),[m
[32m+[m[32m            )[m
[32m+[m[32m            study_labs_listing["status"] = str([m
[32m+[m[32m                "enrolled" if course_id in enrollments else "not-enrolled",[m
             )[m
[31m-            study_labs_listing = {[m
[31m-                "product_listing_id": product_list["id"],[m
[31m-                "value": product_list["price"]["value"],[m
[31m-                "product_id": product_list["productID"],[m
[31m-                "course_id": course_id,[m
[31m-                "study_labs_url": study_labs_url,[m
[31m-                "name": product_list["name"],[m
[31m-                "status": course_id in enrollments,[m
[31m-            }[m
 [m
         # This codition skips study labs[m
         # Which don't have badgr data[m
[36m@@ -326,10 +333,11 @@[m [mdef get_microcerts():[m
             elif course["id"] in enrollments:[m
                 course["status"] = "enrolled"[m
 [m
[31m-            course_id = course["id"][m
[31m-            course["take_url"] = edx_url + quote_plus([m
[31m-                f"/courses/{course_id}/courseware/2020/start/?child=first"[m
[32m+[m[32m            slug = course_id.split("+")[1][m
[32m+[m[32m            course["study_lab_url"] = edx_url + quote_plus([m
[32m+[m[32m                f"/courses/{study_labs}/courseware/{slug}/"[m
             )[m
[32m+[m
             courses.append(course)[m
 [m
     return flask.jsonify([m
[36m@@ -342,7 +350,6 @@[m [mdef get_microcerts():[m
             "modules": courses,[m
             "passed_courses": passed_courses,[m
             "has_enrollments": len(enrollments) > 0,[m
[31m-            "study_labs_url": study_labs_url,[m
             "study_labs_listing": study_labs_listing,[m
         }[m
     )[m
